View(df1)
# remove any rows that have an NA
df <- na.omit(df)
#check out the DF and make sure it looks right
head(df)
missing_by_snp(DiNV_vcf,cutoff = 1)
#open an empty vector to hold each p value
pval<-c()
#for loop to iterate over each row in the dataframe named 'df' one after the other and record p-value for each row (ie, SNP)
for (i in 1:nrow(df)){
# make 1 data frame for the given SNP with numbers of alleles
df1<-data.frame(reference=as.numeric(c(df$inn.ref[i],df$vir.ref[i])),
alt=as.numeric(c(df$inn.alt[i],df$vir.alt[i])),
row.names = c("inn","vir"))
#perform a fisher's exact test for above dataframe
test1<-fisher.test(df1)
#store p value for this test in our vector 'pval
pval[i]<-test1$p.value
}
pval
#check out your p-values
hist(pval)
#check out your p-values
hist(pval, breaks = 50)
# add in the pval vector to the df and name it
df$fisher_pval<-pval
View(df)
# check  new df
head(df)
library(ggplot2)
ggplot(df, aes(x=POS, y=fisher_pval)) + geom_point()
class(df$POS)
df$POS <- as.numeric(df$POS)
View(df1)
View(df)
View(df)
log10(df$fisher_pval)
ggplot(df, aes(x=POS, y=log10(fisher_pval))) + geom_point()
ggplot(df, aes(x=POS, y=-log10(fisher_pval))) + geom_point()
df$neg_log_pval <- (log10(df$fisher_pval))*-1
ggplot(df, aes(x=POS, y=neg_log_pval + geom_point()
ggplot(df, aes(x=POS, y=neg_log_pval) + geom_point()
ggplot(df, aes(x=POS, y=neg_log_pval) + geom_point()
ggplot(df, aes(x=POS, y=neg_log_pval)) + geom_point()
ggplot(df, aes(x=POS, y=neg_log_pval)) + geom_point()
ggplot(df, aes(x=POS, y=neg_log_pval)) + geom_point() + theme_classic()
.05/nrow(df)
#get multiple testing corrected p value (0.05/3of tests)
y<-.05/nrow(df)
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(y), color="red")+
theme_classic()
#how many SNPs exceed our significance threshold?
sig.snps<-df[df$fisher_pval < y,]
View(sig.snps)
#List of positions of important SNPs
snps<-c(14249,41210,42389,59194,59275,59276,66615,78978,78991,126118,132593,140117)
snps %in% sig.snps$POS
snps %in% df$POS
df[df$POS ==14249]
df[df$POS ==14249,]
df[df$POS == 59194,]
found.snps<-snps[snps %in% df$POS]
for (i in found.snps){
print(df[df$POS == i,])
}
freq.in<-df$inn.ref/(df$inn.ref+df$inn.alt)
df$inn.ref
class(df$inn.ref)
freq.in<-a.numeric(df$inn.ref)/(as.numeric(df$inn.ref)+as.numeric(df$inn.alt))
freq.in<-as.numeric(df$inn.ref)/(as.numeric(df$inn.ref)+as.numeric(df$inn.alt))
hist(freq.in)
freq.vir<-as.numeric(df$vir.ref)/(as.numeric(df$vir.ref)+as.numeric(df$vir.alt))
df$af.dif<-freq.in-freq.vir
View(df)
df$af.dif<-abs(freq.in-freq.vir)
table(df$af.dif == 0)
table(freq.in == 0)
table(freq.vir == 0)
hist(freq.in)
hist(freq.vir)
hist(freq.in)
hist(freq.vir)
freq.in<-as.numeric(df$inn.alt)/(as.numeric(df$inn.alt)+as.numeric(df$inn.ref))
freq.vir<-as.numeric(df$vir.alt)/(as.numeric(df$vir.alt)+as.numeric(df$vir.ref))
df$af.dif<-abs(freq.in-freq.vir)
table(df$af.dif == 0)
table(freq.in == 0)
table(freq.vir == 0)
hist(freq.in)
hist(freq.vir)
hist(freq.in, xlab = "allele frequency divergence from reference genome")
hist(freq.vir, xlab = "allele frequency divergence from reference genome")
hist(freq.vir, breaks=50, xlab = "allele frequency divergence from reference genome")
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
hist(freq.in, breaks=100,xlab = "allele frequency divergence from reference genome")
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), color="red")
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), color="red")
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), color="red")
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), color="red")
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.vir), col="red")
#how many SNPs are fixed different between the strains
table(df$af.dif == 0)
fixed<-df[df$af.dif,]
fixed<-df[df$af.dif== 0,]
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="red"),size=1.5)+
geom_hline(yintercept = -log10(y), color="red")+
theme_classic()
View(fixed)
#how many SNPs are fixed different between the strains
table(df$af.dif == 1)
fixed<-df[df$af.dif== 1,]
#plot
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="red"),size=1.5)+
geom_hline(yintercept = -log10(y), color="red")+
theme_classic()
#how many
table(freq.in == 1)
#how many SNPs are fixed for the alternate allele in virilus?
table(freq.vir == 1)
#plot a histogram of the allele freq divergence from the ref genome for innubila with mean value highlighted by vertical red line
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), col="red")
#plot a histogram of the allele freq divergence from the ref genome for virilus with mean value highlighted by vertical red line
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.vir), col="red")
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="red"),size=1.5)+
geom_hline(yintercept = -log10(y), color="red")+
theme_classic()
#how many are found in our SNP dataset?
table(snps[snps %in% df$POS])
#how many are found in our SNP dataset?
table(snps %in% df$POS)
for (i in found.snps){
print(df[df$POS == i,])
}
#isolate the details of the found SNPs
found.snps<-snps[snps %in% df$POS]
#show the p-values and allele frequency differences between the strains for these SNPs of interest
df[df$POS %in% found.snps,]
#show the p-values and allele frequency differences between the strains for these SNPs of interest
df[df$POS %in% found.snps,]
View(alt)
# read in vcf
DiNV_vcf <- read.vcfR("~/Desktop/KU/sequences/16Cq-DiNV-Test/freebayes/continuous-DiNV.vcf")
# filter vcf to remove sites (SNPs) with more than two alleles present (from SNPfiltR package)
DiNV_vcf <- filter_biallelic(DiNV_vcf)
# extract the number of reads supporting the reference allele for each sample at each SNP
# DiNV_vcf has a column containing RO or reference allele information
# the extract.gt function will subset from that column
# the same column contains a lot of other information separated by : and , which is why a specific function is needed
ref <- as.data.frame(extract.gt(DiNV_vcf, element = "RO"))
# extract the number of reads supporting the alternate allele for each sample at each SNP
# AO is alternate allele
# because I removed all SNPs that are more than biallelic, there should only be 1 alternate allele
alt <- as.data.frame(extract.gt(DiNV_vcf, element = "AO"))
# ref and alt are just SNPs and the number of reads
# But I want to also add other information with these, like what are the actual bases for the alleles, and have a column for the position
# that information is in the fix portion of the vcf file, which is hard to look at
# check what it looks like by naming it and looking at it
x<-DiNV_vcf@fix
# after looking at x, I can see that the columns I want are 1: chromosome, 2: position, 4: reference allele, and 5: alternate allele
# subset out those columns
DiNV_SNPs<-as.data.frame(DiNV_vcf@fix[,c(1,2,4,5)])
# add the read counts supporting the reference and alternate alleles for each of the two sequenced strains as their own columns
DiNV_SNPs$inn.ref<-ref$INN
DiNV_SNPs$inn.alt<-alt$INN
DiNV_SNPs$vir.ref<-ref$VIR
DiNV_SNPs$vir.alt<-alt$VIR
# there might be some missing data in this file, which would come out as rows where either inn or vir have an NA for alleles
# remove any rows that have an NA
DiNV_SNPs <- na.omit(DiNV_SNPs)
# additionally, the position needs to be read as a number by R
# turn it into numeric
head(DiNV_SNPs) # check numbers before
DiNV_SNPs$POS <- as.numeric(DiNV_SNPs$POS)
head(DiNV_SNPs) # check to make sure numbers stay the same, sometimes as.numeric can change numbers
test_df <- data.frame(reference=as.numeric(c(DiNV_SNPs$inn.ref[1],DiNV_SNPs$vir.ref[1])),
alt=as.numeric(c(DiNV_SNPs$inn.alt[1],DiNV_SNPs$vir.alt[1])),
row.names = c("inn","vir"))
View(test_df)
test1<-fisher.test(test_df)
# look at the p-value
test1$p.value
heat(test_df)
head(test_df)
# open an empty vector to hold each p-value
# this is so R has somewhere to put the p-values
pval<-c()
# for loop to iterate over each row in the dataframe named 'DiNV_SNPs' one after the other and record p-value for each row (ie, SNP)
# usesi in 1 through nrow because it will use the exact number of rows in the SNP dataframe
for (i in 1:nrow(DiNV_SNPs)){
# make 1 data frame for the given SNP with numbers of alleles
df1<-data.frame(reference=as.numeric(c(DiNV_SNPs$inn.ref[i],DiNV_SNPs$vir.ref[i])),
alt=as.numeric(c(DiNV_SNPs$inn.alt[i],DiNV_SNPs$vir.alt[i])),
row.names = c("inn","vir"))
#perform a fisher's exact test for above dataframe
test2<-fisher.test(df1)
# store p value for this test in our vector 'pval'
# the [i] tells R to store the value in the i-th position
pval[i]<-test2$p.value
}
#check out your p-values
hist(pval, breaks = 50)
# add in the pval vector to the df and name it
DiNV_SNPs$fisher_pval<-pval
# check  new df
head(DiNV_SNPs)
log10(o.5)
log10(0.5)
# first want to transform the p-value in to the negative log 10 so that really small p-values get plotted as larger
# create a new column in the dataframe
DiNV_SNPs$neg_log_pval <- (log10(DiNV_SNPs$fisher_pval))*-1
# get multiple testing corrected p value (0.05/ number of tests)
MTC <- 0.05/nrow(DiNV_SNPs)
# plot scatter plot and add in the line for the MTC (must take negative log10 of that value)
ggplot(DiNV_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(MTC), color="blueviolet")+
theme_classic()
# which SNPs have a p-value less than the multiple testing threshold
sig.snps<-DiNV_SNPs[DiNV_SNPs$fisher_pval < MTC,]
# plot scatter plot and add in the line for the MTC (must take negative log10 of that value)
ggplot(DiNV_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(MTC), color="blueviolet")+
theme_classic() + xlab= "Position" + ylab = "Negative log10 p-value"
# plot scatter plot and add in the line for the MTC (must take negative log10 of that value)
ggplot(DiNV_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(MTC), color="blueviolet")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
# which SNPs have a p-value less than the multiple testing threshold
sig.snps<-DiNV_SNPs[DiNV_SNPs$fisher_pval < MTC,]
#
table(snps %in% DiNV_SNPs$POS)
#isolate the details of the found SNPs
found.snps <- snps[snps %in% DiNV_SNPs$POS]
#show the p-values and allele frequency differences between the strains for these SNPs of interest
DiNV_SNPs[DiNV_SNPs$POS %in% found.snps,]
# first want to transform the p-value in to the negative log 10 so that really small p-values get plotted as larger
# create a new column in the dataframe
DiNV_SNPs$neg_log_pval <- (log10(DiNV_SNPs$fisher_pval))*-1
# get multiple testing corrected p value (0.05/ number of tests)
MTC <- 0.05/nrow(DiNV_SNPs)
# plot scatter plot and add in the line for the MTC (must take negative log10 of that value)
ggplot(DiNV_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(MTC), color="blueviolet")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
# which SNPs have a p-value less than the multiple testing threshold
sig.snps<-DiNV_SNPs[DiNV_SNPs$fisher_pval < MTC,]
head(sig.snps)
# allele frequency is the reads for the allele divided by all alleles
# ex. alternate allele frequency is the number of alternate alleles divided by the number of alt alleles plus reference alleles
# calculate frequency of alternate allele in innubila
freq.in <- as.numeric(DiNV_SNPs$inn.alt)/(as.numeric(DiNV_SNPs$inn.alt)+as.numeric(DiNV_SNPs$inn.ref))
# calculate frequency of alternate allele in virilis
freq.vir <- as.numeric(DiNV_SNPs$vir.alt)/(as.numeric(DiNV_SNPs$vir.alt)+as.numeric(DiNV_SNPs$vir.ref))
# calculate allele frequency difference between the two samples by subtracting innubila frequency from virilis
DiNV_SNPs$af.dif<-abs(freq.in-freq.vir)
# how many SNPs are fixed for the alternate allele in innubila?
table(freq.in == 1)
# how many SNPs are fixed for the alternate allele in virilis?
table(freq.vir == 1)
# how many SNPs are fixed different between the samples?
table(DiNV_SNPs$af.dif == 1)
# allele frequency is the reads for the allele divided by all alleles
# ex. alternate allele frequency is the number of alternate alleles divided by the number of alt alleles plus reference alleles
# calculate frequency of alternate allele in innubila
freq.in <- as.numeric(DiNV_SNPs$inn.alt)/(as.numeric(DiNV_SNPs$inn.alt)+as.numeric(DiNV_SNPs$inn.ref))
# calculate frequency of alternate allele in virilis
freq.vir <- as.numeric(DiNV_SNPs$vir.alt)/(as.numeric(DiNV_SNPs$vir.alt)+as.numeric(DiNV_SNPs$vir.ref))
# calculate allele frequency difference between the two samples by subtracting innubila frequency from virilis
DiNV_SNPs$af.dif<-abs(freq.in-freq.vir)
# how many SNPs are fixed for the alternate allele in innubila?
table(freq.in == 1)
# how many SNPs are fixed for the alternate allele in virilis?
table(freq.vir == 1)
# how many SNPs are fixed different between the samples?
table(DiNV_SNPs$af.dif == 1)
# plot a histogram of the allele freq divergence from the ref genome for innubila with mean value highlighted by vertical red line
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), col="red")
# plot a histogram of the allele freq divergence from the ref genome for virilus with mean value highlighted by vertical red line
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.vir), col="red")
#isolate a dataframe containing only those fixed SNPs
fixed <- DiNV_SNPs[DiNV_SNPs$af.dif== 1,]
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="red"),size=2)+
geom_hline(yintercept = -log10(y), color="cornflowerblue")+
theme_classic()
#isolate a dataframe containing only those fixed SNPs
fixed <- DiNV_SNPs[DiNV_SNPs$af.dif== 1,]
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="cornflowerblue"),size=2)+
geom_hline(yintercept = -log10(y), color="blueviolet")+
theme_classic()
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="deepskyblue"),size=2)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic()
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, fill="deepskyblue"),size=2)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic()
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, color="deepskyblue"), size=2)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic()
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, fill="deepskyblue"), size=3)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic()
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval, fill='deepskyblue'), size=3)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic()
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval), color = "deepskyblue" size=3)+
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval), color = "deepskyblue", size=3)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic()
#isolate a dataframe containing only those fixed SNPs
fixed <- DiNV_SNPs[DiNV_SNPs$af.dif== 1,]
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval), color = "deepskyblue", size=3)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
# load library
# install.packages("vcfR")
library(vcfR)
# install.packages("SNPfiltR")
library(SNPfiltR)
library(ggplot2)
# read in vcf
DiNV_vcf <- read.vcfR("~/Desktop/KU/sequences/16Cq-DiNV-Test/freebayes/continuous-DiNV.vcf")
# filter vcf to remove sites (SNPs) with more than two alleles present (from SNPfiltR package)
DiNV_vcf <- filter_biallelic(DiNV_vcf)
# extract the number of reads supporting the reference allele for each sample at each SNP
# DiNV_vcf has a column containing RO or reference allele information
# the extract.gt function will subset from that column
# the same column contains a lot of other information separated by : and , which is why a specific function is needed
ref <- as.data.frame(extract.gt(DiNV_vcf, element = "RO"))
# extract the number of reads supporting the alternate allele for each sample at each SNP
# AO is alternate allele
# because I removed all SNPs that are more than biallelic, there should only be 1 alternate allele
alt <- as.data.frame(extract.gt(DiNV_vcf, element = "AO"))
# ref and alt are just SNPs and the number of reads
# But I want to also add other information with these, like what are the actual bases for the alleles, and have a column for the position
# that information is in the fix portion of the vcf file, which is hard to look at
# check what it looks like by naming it and looking at it
x<-DiNV_vcf@fix
# after looking at x, I can see that the columns I want are 1: chromosome, 2: position, 4: reference allele, and 5: alternate allele
# subset out those columns
DiNV_SNPs<-as.data.frame(DiNV_vcf@fix[,c(1,2,4,5)])
# add the read counts supporting the reference and alternate alleles for each of the two sequenced strains as their own columns
DiNV_SNPs$inn.ref<-ref$INN
DiNV_SNPs$inn.alt<-alt$INN
DiNV_SNPs$vir.ref<-ref$VIR
DiNV_SNPs$vir.alt<-alt$VIR
# there might be some missing data in this file, which would come out as rows where either inn or vir have an NA for alleles
# remove any rows that have an NA
DiNV_SNPs <- na.omit(DiNV_SNPs)
# additionally, the position needs to be read as a number by R
# turn it into numeric
head(DiNV_SNPs) # check numbers before
DiNV_SNPs$POS <- as.numeric(DiNV_SNPs$POS)
head(DiNV_SNPs) # check to make sure numbers stay the same, sometimes as.numeric can change numbers
# this will need to be run in a loop because there are 10,437 SNPs and each one needs an individual dataframe
# and a test run on them
# starting by testing the process with just one SNP
# start by making the first column be the reference allele: reference=
# give reference a list of the numbers I want it to be: the first allele count entry in DiNV_SNPs for innubila reference and virilis reference
# then the second column is the alternative allele: alt=
# and do the same thing, the first entry in DiNV_SNPs for innubila alternate and virilis alternate
# then I give the dataframe row names, which are in the same order as the allele counts are specified
test_df <- data.frame(reference=as.numeric(c(DiNV_SNPs$inn.ref[1],DiNV_SNPs$vir.ref[1])),
alt=as.numeric(c(DiNV_SNPs$inn.alt[1],DiNV_SNPs$vir.alt[1])),
row.names = c("inn","vir"))
# use this test_df to perform a Fisher's Exact Test
test1<-fisher.test(test_df)
# look at the p-value
test1$p.value
# a p-value of 1 makes sense because if you look at this SNP, there really isn't a difference between the alleles
head(test_df)
# open an empty vector to hold each p-value
# this is so R has somewhere to put the p-values
pval<-c()
# for loop to iterate over each row in the dataframe named 'DiNV_SNPs' one after the other and record p-value for each row (ie, SNP)
# usesi in 1 through nrow because it will use the exact number of rows in the SNP dataframe
for (i in 1:nrow(DiNV_SNPs)){
# make 1 data frame for the given SNP with numbers of alleles
df1<-data.frame(reference=as.numeric(c(DiNV_SNPs$inn.ref[i],DiNV_SNPs$vir.ref[i])),
alt=as.numeric(c(DiNV_SNPs$inn.alt[i],DiNV_SNPs$vir.alt[i])),
row.names = c("inn","vir"))
#perform a fisher's exact test for above dataframe
test2<-fisher.test(df1)
# store p value for this test in our vector 'pval'
# the [i] tells R to store the value in the i-th position
pval[i]<-test2$p.value
}
# check out your p-values
# most p-values should be 1 because the SNP allele counts are not significantly different between the samples
hist(pval, breaks = 50)
# add in the pval vector to the DiNV_SNPs and name it
DiNV_SNPs$fisher_pval<-pval
# check  new DiNV_SNPs to make sure it looks right
head(DiNV_SNPs)
# first want to transform the p-value in to the negative log 10 so that really small p-values get plotted as larger
# create a new column in the dataframe
DiNV_SNPs$neg_log_pval <- (log10(DiNV_SNPs$fisher_pval))*-1
# get multiple testing corrected p value (0.05/ number of tests)
MTC <- 0.05/nrow(DiNV_SNPs)
# plot scatter plot and add in the line for the MTC (must take negative log10 of that value)
ggplot(DiNV_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(MTC), color="blueviolet")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
# which SNPs have a p-value less than the multiple testing threshold
sig.snps<-DiNV_SNPs[DiNV_SNPs$fisher_pval < MTC,]
# list of positions of important SNPs (12)
snps <- c(14249,41210,42389,59194,59275,59276,66615,78978,78991,126118,132593,140117)
# which SNPs are present in the DiNV_SNPs (not just significant ones)
table(snps %in% DiNV_SNPs$POS)
# 6 are SNPs, and 6 were not found as SNPs
# isolate the details of the found SNPs
# separate out the 6 that are present in DiNV_SNPs
found.snps <- snps[snps %in% DiNV_SNPs$POS]
# show the p-values and allele frequency differences between the samples for these SNPs of interest
DiNV_SNPs[DiNV_SNPs$POS %in% found.snps,]
# allele frequency is the reads for the allele divided by all alleles
# ex. alternate allele frequency is the number of alternate alleles divided by the number of alt alleles plus reference alleles
# calculate frequency of alternate allele in innubila
freq.in <- as.numeric(DiNV_SNPs$inn.alt)/(as.numeric(DiNV_SNPs$inn.alt)+as.numeric(DiNV_SNPs$inn.ref))
# calculate frequency of alternate allele in virilis
freq.vir <- as.numeric(DiNV_SNPs$vir.alt)/(as.numeric(DiNV_SNPs$vir.alt)+as.numeric(DiNV_SNPs$vir.ref))
# calculate allele frequency difference between the two samples by subtracting innubila frequency from virilis
DiNV_SNPs$af.dif<-abs(freq.in-freq.vir)
# how many SNPs are fixed for the alternate allele in innubila?
table(freq.in == 1)
# how many SNPs are fixed for the alternate allele in virilis?
table(freq.vir == 1)
# how many SNPs are fixed different between the samples?
table(DiNV_SNPs$af.dif == 1)
# plot a histogram of the allele freq divergence from the ref genome for innubila with mean value highlighted by vertical red line
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), col="red")
# plot a histogram of the allele freq divergence from the ref genome for virilus with mean value highlighted by vertical red line
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.vir), col="red")
#isolate a dataframe containing only those fixed SNPs
fixed <- DiNV_SNPs[DiNV_SNPs$af.dif== 1,]
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(df, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval), color = "deepskyblue", size=3)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
#isolate a dataframe containing only those fixed SNPs
fixed <- DiNV_SNPs[DiNV_SNPs$af.dif== 1,]
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(DiNV_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval), color = "deepskyblue", size=3)+
geom_hline(yintercept = -log10(y), color="deeppink")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
