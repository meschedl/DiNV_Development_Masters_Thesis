knitr::opts_chunk$set(dpi=300,fig.width=7)
# load library
# install.packages("vcfR")
library(vcfR)
knitr::opts_chunk$set(dpi=300,fig.width=7)
# load library
install.packages("vcfR")
library(vcfR)
install.packages("SNPfiltR")
library(SNPfiltR)
library(ggplot2)
library(ggVennDiagram)
install.packages("ggVennDiagram")
library(ggVennDiagram)
library(units)
filtered_SNPs <- read.csv("~/Desktop/KU/sequences/16Cq-DiNV-Test/freebayes/Gprime_df_filt.csv")
# there are a lot of columns in this that I don't need (from the G prime statistics, etc) and some columns should be labeled better
# keep all rows
# want columns
filtered_SNPs <- filtered_SNPs[,c(2:7,10:11)]
# need to rename the columns
colnames(filtered_SNPs)[5] ="vir.ref"
colnames(filtered_SNPs)[6] ="vir.alt"
colnames(filtered_SNPs)[7] ="inn.ref"
colnames(filtered_SNPs)[8] ="inn.alt"
# this will need to be run in a loop because there are 10,437 SNPs and each one needs an individual dataframe
# and a test run on them
# starting by testing the process with just one SNP
# start by making the first column be the reference allele: reference=
# give reference a list of the numbers I want it to be: the first allele count entry in DiNV_SNPs for innubila reference and virilis reference
# then the second column is the alternative allele: alt=
# and do the same thing, the first entry in DiNV_SNPs for innubila alternate and virilis alternate
# then I give the dataframe row names, which are in the same order as the allele counts are specified
test_df <- data.frame(reference=as.numeric(c(filtered_SNPs$inn.ref[1],filtered_SNPs$vir.ref[1])),
alt=as.numeric(c(filtered_SNPs$inn.alt[1],filtered_SNPs$vir.alt[1])),
row.names = c("inn","vir"))
# use this test_df to perform a Fisher's Exact Test
test1<-fisher.test(test_df)
# look at the p-value
test1$p.value
# check the test_df
head(test_df)
# open an empty vector to hold each p-value
# this is so R has somewhere to put the p-values
pval<-c()
# for loop to iterate over each row in the dataframe named 'DiNV_SNPs' one after the other and record p-value for each row (ie, SNP)
# usesi in 1 through nrow because it will use the exact number of rows in the SNP dataframe
for (i in 1:nrow(filtered_SNPs)){
# make 1 data frame for the given SNP with numbers of alleles
df1<-data.frame(reference=as.numeric(c(filtered_SNPs$inn.ref[i],filtered_SNPs$vir.ref[i])),
alt=as.numeric(c(filtered_SNPs$inn.alt[i],filtered_SNPs$vir.alt[i])),
row.names = c("inn","vir"))
#perform a fisher's exact test for above dataframe
test2<-fisher.test(df1)
# store p value for this test in our vector 'pval'
# the [i] tells R to store the value in the i-th position
pval[i]<-test2$p.value
}
# check out my p-values
hist(pval, breaks = 50)
# add in the pval vector to the DiNV_SNPs and name it
filtered_SNPs$fisher_pval<-pval
# check  new DiNV_SNPs to make sure it looks right
head(filtered_SNPs)
# first want to transform the p-value in to the negative log 10 so that really small p-values get plotted as larger
# create a new column in the dataframe
filtered_SNPs$neg_log_pval <- (log10(filtered_SNPs$fisher_pval))*-1
# get multiple testing corrected p value (0.05/ number of tests)
MTC <- 0.05/nrow(filtered_SNPs)
# plot scatter plot and add in the line for the MTC (must take negative log10 of that value)
ggplot(filtered_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_hline(yintercept = -log10(MTC), color="blueviolet")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
# which SNPs have a p-value less than the multiple testing threshold
sig.snps<-filtered_SNPs[filtered_SNPs$fisher_pval < MTC,]
# list of positions of important SNPs (12)
snps <- c(14249,41210,42389,59194,59275,59276,66615,78978,78991,126118,132593,140117)
# which SNPs are present in the DiNV_SNPs (not just significant ones)
table(snps %in% filtered_SNPs$POS)
# 6 are SNPs, and 6 were not found as SNPs
# isolate the details of the found SNPs
# separate out the 6 that are present in DiNV_SNPs
found.snps <- snps[snps %in% filtered_SNPs$POS]
# show the p-values and allele frequency differences between the samples for these SNPs of interest
filtered_SNPs[filtered_SNPs$POS %in% found.snps,]
# allele frequency is the reads for the allele divided by all alleles
# ex. alternate allele frequency is the number of alternate alleles divided by the number of alt alleles plus reference alleles
# calculate frequency of alternate allele in innubila
freq.in <- as.numeric(filtered_SNPs$inn.alt)/(as.numeric(filtered_SNPs$inn.alt)+as.numeric(filtered_SNPs$inn.ref))
# calculate frequency of alternate allele in virilis
freq.vir <- as.numeric(filtered_SNPs$vir.alt)/(as.numeric(filtered_SNPs$vir.alt)+as.numeric(filtered_SNPs$vir.ref))
# calculate allele frequency difference between the two samples by subtracting innubila frequency from virilis
filtered_SNPs$af.dif<-abs(freq.in-freq.vir)
# how many SNPs are fixed for the alternate allele in innubila?
table(freq.in == 1)
# how many SNPs are fixed for the alternate allele in virilis?
table(freq.vir == 1)
# how many SNPs are fixed different between the samples?
table(filtered_SNPs$af.dif == 1)
# plot a histogram of the allele freq divergence from the ref genome for innubila with mean value highlighted by vertical red line
hist(freq.in, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.in), col="red")
# plot a histogram of the allele freq divergence from the ref genome for virilis with mean value highlighted by vertical red line
hist(freq.vir, breaks=100, xlab = "allele frequency divergence from reference genome")
abline(v=mean(freq.vir), col="red")
#isolate a dataframe containing only those fixed SNPs
fixed <- filtered_SNPs[filtered_SNPs$af.dif== 1,]
#plot overlaid onto same plot as above, just add in another geom_point
ggplot(filtered_SNPs, aes(x=POS, y=neg_log_pval))+
geom_point()+
geom_point(data=fixed,
aes(x=POS,y=neg_log_pval), color = "deepskyblue", size=3)+
geom_hline(yintercept = -log10(MTC), color="deeppink")+
theme_classic() + xlab("Position") + ylab("Negative log10 p-value")
View(fixed)
View(fixed)
