# look at the statistics of the model
summary(df_fit2)
# add model with interaction term (so treatment * block)
# no errors in this model when I made 9 fly die during experimental time in the control treatment for each block
# if no flies had died in one treatment in 1 block it would give infinate values for some confidence intervals which is not great
df_fit3<- coxph(Surv(dead, status) ~ block + treatment  + treatment * block, data=df.convert)
# look at the statistics of the model with interaction term
summary(df_fit3)
# extract AIC of df_fit2 (no interaction term)
extractAIC(df_fit2)
# 2.0000 559.9158
# extract AIC of df_fit3 (with interaction term)
extractAIC(df_fit3)
# 3.0000 561.6742
# compare AICs
exp((559.9158 - 561.6742)/2)
# 0.415, this would be a p value comparing the non interaction and the interaction models. There is no significant difference between the two AICs, so either one is a good fit
# what about is I compare a model with just treatment to a model with treatment and block?
df_fit_t<- coxph(Surv(dead, status) ~ treatment, data=df.convert)
# look at the statistics of the model
summary(df_fit_t)
# get the AIC for the model with just treatment
extractAIC(df_fit_t)
# 1.0000 566.6194
# Compare AICs
exp((559.9158 - 566.6194)/2)
# 0.03502126
# So this would suggest that there is a significant difference in the AIC between the two models, and with AIC the lower number is the best one, indicating that the model that uses block + treatment is the best model
# order treatments
df.convert <- df.convert %>%
mutate(treatment = factor(treatment, levels = c("cell culture medium", "16Cq DiNV")))
df_fit2<- survfit(Surv(dead, status) ~ treatment, data=df.convert)
ggsurvplot(df_fit2, size = 5,
pval = FALSE, conf.int = FALSE,
ggtheme = theme_light(), # Change ggplot2 theme
font.tickslab = c(14),
legend = "bottom",
font.x = c(16),
font.y = c(16),
font.t = c(16),
title = expression(paste("Male",italic(" D. innubila ") "Injected with 16Cq DiNV")),
# order treatments
df.convert <- df.convert %>%
mutate(treatment = factor(treatment, levels = c("cell culture medium", "16Cq DiNV")))
df_fit2<- survfit(Surv(dead, status) ~ treatment, data=df.convert)
ggsurvplot(df_fit2, size = 5,
pval = FALSE, conf.int = FALSE,
ggtheme = theme_light(), # Change ggplot2 theme
font.tickslab = c(14),
legend = "bottom",
font.x = c(16),
font.y = c(16),
font.t = c(16),
title = expression(paste("Male",italic(" D. innubila "), "Injected with 16Cq DiNV")),
legend.title="Treatment",
legend.labs=c("Cell culture medium", "16Cq DiNV"),
font.legend = c(14),
palette = c("#E7E1EF", "#DF65B0")) + ylab("Survival Proporation") + xlab("Days post injection")
# not sure why this plot is not rendering in the markdown with the same colors so save here
ggsave("16Cq-inject-male.jpeg")
# order treatments
df.convert <- df.convert %>%
mutate(treatment = factor(treatment, levels = c("cell culture medium", "16Cq DiNV")))
df_fit2<- survfit(Surv(dead, status) ~ treatment, data=df.convert)
ggsurvplot(df_fit2, size = 5,
pval = FALSE, conf.int = FALSE,
ggtheme = theme_light(), # Change ggplot2 theme
font.tickslab = c(14),
legend = "bottom",
font.x = c(16),
font.y = c(16),
font.t = c(16),
title = expression(paste("Male",italic(" D. innubila "), "Injected with 16Cq DiNV")),
legend.title="Treatment",
legend.labs=c("Cell culture medium", "16Cq DiNV"),
font.legend = c(14),
palette = c("#E7E1EF", "#DF65B0")) + ylab("Survival Proporation") + xlab("Days post injection")
# not sure why this plot is not rendering in the markdown with the same colors so save here
ggsave("16Cq-inject-male.jpeg")
knitr::opts_chunk$set(dpi=300,fig.width=12, fig.height = 7)
library("survival")
library("survminer")
library(dplyr)
library(tidyr)
library(stringr)
library(AICcmodavg)
#write a function to transform a data.frame that has the column format 'vial | treatment | D0 | D1 | D2...', with one row for each vial
#into a long version in tidy format that can be input to make a survivorship curve
convert_df<-function(df){
#open empty data.frame to store results
results<-data.frame(vial=character(),treatment=character(),dead=numeric(),status=numeric())
#This loop will index out each row (one row per vial) one at a time, transform it into long format (one row per fly), and add the information to the empty data.frame called results
for(i in 1:nrow(df)){
#isolate the row (vial) you want to work on
temp<-df[i,]
#iteratively isolate each day for this vial (day 0 must be column 3, day 1 column 4, etc.). Loop stops the column before the last day
for(j in 3:(ncol(temp)-1)){
#assign the number of flies that died in the vial on that day (starting with day 1) to the variable 'z'
z<-temp[1,j]-temp[1,j+1]
#if >0 flies died add this information to the results dataframe
if(z>0){
#iterate over 1 through total number of dead flies
for(k in 1:z){
#add a new row to the 'results' data.frame for the given dead fly, specifying vial #, treatment, day died, and
#record the current vial #
vial<-temp[,1]
#record the genotype of the current vial
treatment<-temp[,2]
#record the death date of the flies that died on this day (assumes that your input DF starts with day 0 in column 3)
dd<-j-2
#append this information into a new row in the 'results' data.frame, and add a '1' in the 4th column to indicate mortality
results[nrow(results)+1,]<- c(vial,treatment,dd,1)
} #close for loop
} #close if loop
} #close for loop
#now assign the number of flies remaining in the vial on the last day (value in the last column of the row) to the variable 'z'
z<-temp[1,j+1]
#if there are any flies alive in the vial on the last day
if(z>0){
#iterate over 1:(number of flies alive on the last day)
for(l in 1:z){
#record the current vial #
vial<-temp[,1]
#record the genotype of the current vial
treatment<-temp[,2]
#record the last day we recorded this fly alive (assumes that your input DF starts with day 0 in column 3)
dd<-j-2
#append this information into a new row in the 'results' data.frame, and add a '0' in the 4th column to indicate that the fly made it to the end of the experiment
results[nrow(results)+1,]<- c(vial,treatment,dd,0)
} #close for loop
} #close if loop
} #close original for loop
results$dead<-as.numeric(results$dead)  #reiterate that this column must be class numeric
results$status<-as.numeric(results$status)  #reiterate that this column must be class numeric
results$vial <- as.factor(results$vial) # make sure vial is considered a factor
# gives you only the results dataframe as output from function
return(results)
} #close function
#read the file from csv
df<-read.csv("/Users/maggieschedl/Desktop/Github/Unckless_Lab_Resources/Infection_survival_analyses/20231025-rep-3-male-female-nanoject-16Cq/20231025-sheet.csv")
# separate out columns needed
df<-df[,c(1,3,14:32)]
df.convert<-convert_df(df)
# change to not have confidence intervals in this one so you can see them
df_fit<- survfit(Surv(dead, status) ~ treatment, data=df.convert)
ggsurvplot(df_fit,
pval = TRUE, conf.int = FALSE,
#risk.table = TRUE, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
#linetype = "strata", # Change line type by groups
#surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("orchid", "aquamarine", "blueviolet", "darkslategray3")) + ylab("Survival Proporation") + xlab("Days post injection")
#read the file from csv
df2<-read.csv("/Users/maggieschedl/Desktop/Github/Unckless_Lab_Resources/Infection_survival_analyses/20231025-rep-3-male-female-nanoject-16Cq/male-female-rep-1-2-3-counts-combo.csv")
# convert dataframe
df2.convert <- convert_df(df2)
# add in block information
# first 69 rows are block A, second 69 rows are block B, and last 68 rows are block C
df2.convert$Block <- rep(c("A","B", "C"), c(69, 68,68))
# add in sex information and DiNV information as separate columns by splitting the treatment column
# split the columns
df2.convert_S <- str_split_fixed(df2.convert$treatment, "-", 2)
# change column names
colnames(df2.convert_S) <- c("sex", "injection")
# add columns to df
df2.convert_full <- cbind(df2.convert,df2.convert_S )
df2.convert_full <- df2.convert_full %>%
mutate(treatment = factor(treatment, levels = c("male-CCM", "female-CCM", "male-DiNV", "female-DiNV")))
df_fit_combo_1 <- survfit(Surv(dead, status) ~ treatment, data=df2.convert_full)
ggsurvplot(df_fit_combo_1, size = 5,
pval = FALSE, conf.int = FALSE,
legend = "bottom",
font.tickslab = c(14),
font.x = c(16),
font.y = c(16),
font.t = c(16),
ggtheme = theme_light(),
title = expression(paste("Comparing Male and Female",italic(" D. innubila "), " injected with 16Cq DiNV")),
legend.title="Treatment",
legend.labs=c("male CCM", "female CCM", "male 16Cq DiNV", "female 16Cq DiNV"),
font.legend = c(14),
palette = c("#ccf9ff", "#62CFF4" ,"#2C67F2",  "#191970")) + ylab("Survival Proporation") + xlab("Days post injection")
surv_median(df_fit_combo_1, combine = FALSE)
# model including block
df_fit_combo_2<- coxph(Surv(dead, status) ~ treatment + Block, data=df2.convert_full)
summary(df_fit_combo_2)
# model including block
df_fit_combo_3<- coxph(Surv(dead, status) ~ injection + Block, data=df2.convert_full)
summary(df_fit_combo_3)
# model including block
df_fit_combo_4<- coxph(Surv(dead, status) ~ injection + Block + sex, data=df2.convert_full)
summary(df_fit_combo_4)
# model including block
df_fit_combo_5<- coxph(Surv(dead, status) ~ Block + sex*injection, data=df2.convert_full)
summary(df_fit_combo_5)
models <- list(df_fit_combo_3, df_fit_combo_4, df_fit_combo_5)
model.names <- c( 'block and injection', 'block injection and sex', 'block and sex injection interaction')
aictab(cand.set = models, modnames = model.names)
# best model is df_fit_combo_5 but not by much
summary(df_fit_combo_5)
knitr::opts_chunk$set(dpi=300,fig.width=7, fig.height = 9)
library("survival")
library("survminer")
library(dplyr)
library(tidyr)
library(stringr)
library(AICcmodavg)
#write a function to transform a data.frame that has the column format 'vial | treatment | D0 | D1 | D2...', with one row for each vial
#into a long version in tidy format that can be input to make a survivorship curve
convert_df<-function(df){
#open empty data.frame to store results
results<-data.frame(vial=character(),treatment=character(),dead=numeric(),status=numeric())
#This loop will index out each row (one row per vial) one at a time, transform it into long format (one row per fly), and add the information to the empty data.frame called results
for(i in 1:nrow(df)){
#isolate the row (vial) you want to work on
temp<-df[i,]
#iteratively isolate each day for this vial (day 0 must be column 3, day 1 column 4, etc.). Loop stops the column before the last day
for(j in 3:(ncol(temp)-1)){
#assign the number of flies that died in the vial on that day (starting with day 1) to the variable 'z'
z<-temp[1,j]-temp[1,j+1]
#if >0 flies died add this information to the results dataframe
if(z>0){
#iterate over 1 through total number of dead flies
for(k in 1:z){
#add a new row to the 'results' data.frame for the given dead fly, specifying vial #, treatment, day died, and
#record the current vial #
vial<-temp[,1]
#record the genotype of the current vial
treatment<-temp[,2]
#record the death date of the flies that died on this day (assumes that your input DF starts with day 0 in column 3)
dd<-j-2
#append this information into a new row in the 'results' data.frame, and add a '1' in the 4th column to indicate mortality
results[nrow(results)+1,]<- c(vial,treatment,dd,1)
} #close for loop
} #close if loop
} #close for loop
#now assign the number of flies remaining in the vial on the last day (value in the last column of the row) to the variable 'z'
z<-temp[1,j+1]
#if there are any flies alive in the vial on the last day
if(z>0){
#iterate over 1:(number of flies alive on the last day)
for(l in 1:z){
#record the current vial #
vial<-temp[,1]
#record the genotype of the current vial
treatment<-temp[,2]
#record the last day we recorded this fly alive (assumes that your input DF starts with day 0 in column 3)
dd<-j-2
#append this information into a new row in the 'results' data.frame, and add a '0' in the 4th column to indicate that the fly made it to the end of the experiment
results[nrow(results)+1,]<- c(vial,treatment,dd,0)
} #close for loop
} #close if loop
} #close original for loop
results$dead<-as.numeric(results$dead)  #reiterate that this column must be class numeric
results$status<-as.numeric(results$status)  #reiterate that this column must be class numeric
results$vial <- as.factor(results$vial) # make sure vial is considered a factor
# gives you only the results dataframe as output from function
return(results)
} #close function
#read the file from csv
df<-read.csv("/Users/maggieschedl/Desktop/Github/Unckless_Lab_Resources/Infection_survival_analyses/20240209-dilution-rep-4/dilution-infection-combo-sheet.csv")
# Remove the rows of the undiluted samples because I did not do those for the other replicates
df <- df[c(1:12, 15:56),]
# separate out columns needed
df <- df[,c(1,3,15:29)]
df.convert<-convert_df(df)
# change to not have confidence intervals in this one so you can see them
df_fit<- survfit(Surv(dead, status) ~ treatment, data=df.convert)
ggsurvplot(df_fit,
pval = FALSE, conf.int = FALSE,
#risk.table = TRUE, # Add risk table
#risk.table.col = "strata", # Change risk table color by groups
#linetype = "strata", # Change line type by groups
#surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw()) # Change ggplot2 theme
# palette = c("orchid", "aquamarine", "blueviolet", "darkslategray3")) + ylab("Survival Proporation") + xlab("Days post injection")
# add in sex information and DiNV information as separate columns by splitting the treatment column
# split the columns
df.convert_S <- str_split_fixed(df.convert$treatment, "-", 2)
# change column names
colnames(df.convert_S) <- c("sex", "dilution")
# add columns to df
df.convert_full <- cbind(df.convert,df.convert_S)
# add in block information
# this was not reproducable to count but I don't know how else to do it
# first 118 rows are block A, second 127 rows are block B, the third 138 rows are block C, and the last 133 rows are block D
df.convert_full$Block <- rep(c("A","B", "C", "D"), c(118, 127, 138, 129))
df.convert_fem <- df.convert_full[which(df.convert_full$sex != "male"),]
# order treatments
df.convert_fem <- df.convert_fem %>%
mutate(dilution = factor(dilution, levels = c("CCM", "0.01", "0.1", "1", "3", "6")))
# change to not have confidence intervals in this one so you can see them
df_fit_fem<- survfit(Surv(dead, status) ~ dilution, data=df.convert_fem)
ggsurvplot(df_fit_fem, size = 5,
pval = FALSE, conf.int = FALSE,
legend = "bottom",
font.tickslab = c(14),
font.x = c(16),
font.y = c(16),
font.t = c(16),
ggtheme = theme_light(),
title = expression(paste("Female",italic(" D. innubila "), "D. innubila Injected with Dilutions of Passage 4 DiNV")),
legend.title="Treatment",
legend.labs=c("CCM", "0.01 FFU", "0.1 FFU", "1 FFU", "3 FFU", "6 FFU"),
font.legend = c(14),
palette = c("#E7E1EF", "#C994C7","#DF65B0","#E7298A" ,"#980043", "#67001F")) + ylab("Survival Proporation") + xlab("Days post injection")
df.convert_m <- df.convert_full[which(df.convert_full$sex != "female"),]
# order treatments
df.convert_m <- df.convert_m %>%
mutate(dilution = factor(dilution, levels = c("CCM", "0.01", "0.1", "1", "3", "6")))
# change to not have confidence intervals in this one so you can see them
df_fit_m<- survfit(Surv(dead, status) ~ dilution, data=df.convert_m)
ggsurvplot(df_fit_m, size = 5,
pval = FALSE, conf.int = FALSE,
legend = "bottom",
font.tickslab = c(14),
font.x = c(16),
font.y = c(16),
ggtheme = theme_light(),
title = "Male D. innubila Injected with Dilutions of Passage 4 DiNV",
legend.title="Treatment",
legend.labs=c("CCM", "0.01 FFU", "0.1 FFU", "1 FFU", "3 FFU", "6 FFU"),
font.legend = c(14),
palette = c("#E7E1EF", "#C994C7","#DF65B0","#E7298A" ,"#980043", "#67001F")) + ylab("Survival Proporation") + xlab("Days post injection")
# females
surv_median(df_fit_fem, combine = FALSE)
# males
surv_median(df_fit_m, combine = FALSE)
male_1 <- coxph(Surv(dead, status) ~ dilution + Block, data=df.convert_m)
summary(male_1)
female_1 <- coxph(Surv(dead, status) ~ dilution + Block, data=df.convert_fem)
summary(female_1)
# I want to keep both 6 and CCM
df.convert_6 <- df.convert_full[which(df.convert_full$dilution == "6"),]
df.convert_ccm <-  df.convert_full[which(df.convert_full$dilution == "CCM"),]
# combine back together
df.convert_6 <- rbind(df.convert_ccm, df.convert_6)
# model no interaction
six_1 <- coxph(Surv(dead, status) ~ dilution + Block + sex , data=df.convert_6)
summary(six_1)
# model with interaction
six_2 <- coxph(Surv(dead, status) ~ dilution + Block + sex + sex * dilution, data=df.convert_6)
summary(six_2)
# compare AICs of models
extractAIC(six_1)
# 1283.805
extractAIC(six_2)
# 1285.713
# compare models
exp((1283.805 - 1285.713)/2)
# 0.3851971 no sig difference between models
# I want to keep both 3 and CCM
df.convert_3 <- df.convert_full[which(df.convert_full$dilution == "3"),]
# combine back together
df.convert_3 <- rbind(df.convert_ccm, df.convert_3)
# model no interaction
three_1 <- coxph(Surv(dead, status) ~ dilution + Block + sex , data=df.convert_3)
summary(three_1)
# model with interaction
three_2 <- coxph(Surv(dead, status) ~ dilution + Block + sex + sex * dilution, data=df.convert_3)
summary(three_2)
# compare AICs of models
extractAIC(three_1)
# 863.3738
extractAIC(three_2)
# 865.2409
# compare models
exp((863.3738 - 865.2409)/2)
# 0.3931555 no sig difference between models
# I want to keep both 1 and CCM
df.convert_1 <- df.convert_full[which(df.convert_full$dilution == "1"),]
# combine back together
df.convert_1 <- rbind(df.convert_ccm, df.convert_1)
# model no interaction
one_1 <- coxph(Surv(dead, status) ~ dilution + Block + sex , data=df.convert_1)
summary(one_1)
# model with interaction
one_2 <- coxph(Surv(dead, status) ~ dilution + Block + sex + sex * dilution, data=df.convert_1)
summary(one_2)
# compare AICs of models
extractAIC(one_1)
# 872.5189
extractAIC(one_2)
# 874.354
# compare models
exp((872.5189 - 874.354)/2)
# 0.3994966 no sig difference between models
# I want to keep both 0.1 and CCM
df.convert_01 <- df.convert_full[which(df.convert_full$dilution == "0.1"),]
# combine back together
df.convert_01 <- rbind(df.convert_ccm, df.convert_01)
# model no interaction
one0_1 <- coxph(Surv(dead, status) ~ dilution + Block + sex , data=df.convert_01)
summary(one0_1)
# model with interaction
one0_2 <- coxph(Surv(dead, status) ~ dilution + Block + sex + sex * dilution, data=df.convert_01)
summary(one0_2)
# compare AICs of models
extractAIC(one0_1)
# 845.7176
extractAIC(one0_2)
# 847.6887
# compare models
exp((845.7176 - 847.6887)/2)
# 0.3732339 no sig difference between models
# I want to keep both 0.01 and CCM
df.convert_001 <- df.convert_full[which(df.convert_full$dilution == "0.01"),]
# combine back together
df.convert_001 <- rbind(df.convert_ccm, df.convert_001)
# model no interaction
one00_1 <- coxph(Surv(dead, status) ~ dilution + Block + sex , data=df.convert_001)
summary(one00_1)
# model with interaction
one00_2 <- coxph(Surv(dead, status) ~ dilution + Block + sex + sex * dilution, data=df.convert_001)
summary(one00_2)
# compare AICs of models
extractAIC(one00_1)
# 527.0507
extractAIC(one00_2)
# 528.9747
# compare models
exp((527.0507 - 528.9747)/2)
# 0.3821279 no sig difference between models
# make dilution as a numeric/continuous variable
# make a duplicate column
df.convert_full$numeric.dilution <- df.convert_full$dilution
# set CCM to a dose of 0
df.convert_full$numeric.dilution[which(df.convert_full$numeric.dilution == "CCM")] = 0
# make all values numeric
df.convert_full$numeric.dilution <- as.numeric(df.convert_full$numeric.dilution)
df_all_fit<- coxph(Surv(dead, status) ~ sex*numeric.dilution + Block, data=df.convert_full)
summary(df_all_fit)
df_all_nosex_fit<- coxph(Surv(dead, status) ~ numeric.dilution + Block, data=df.convert_full)
summary(df_all_nosex_fit)
df_all_noint_fit<- coxph(Surv(dead, status) ~ numeric.dilution + Block + sex, data=df.convert_full)
summary(df_all_noint_fit)
models <- list(df_all_fit, df_all_nosex_fit, df_all_noint_fit)
model.names <- c( 'model with sex and dilution interaction', 'model without sex as a variable', 'model with sex but no interaction')
aictab(cand.set = models, modnames = model.names)
# best model is df_all_noint_fit but not by much
summary(df_all_noint_fit)
# remove CCM or 0 dose treatment
df_highdils <- df.convert_full[which(df.convert_full$numeric.dilution != 0),]
# remove 0.01 FFU dose treatment
df_highdils <- df_highdils[which(df_highdils$numeric.dilution != 0.01),]
# dilution and sex interaction
df_highdils_fit <- coxph(Surv(dead, status) ~ numeric.dilution*sex + Block, data=df_highdils)
summary(df_highdils_fit)
# dilution and sex no interaction
df_highdils_fitni <- coxph(Surv(dead, status) ~ numeric.dilution + sex + Block, data=df_highdils)
summary(df_highdils_fitni)
# dilution no sex
df_highdils_fitns <- coxph(Surv(dead, status) ~ numeric.dilution + Block, data=df_highdils)
summary(df_highdils_fitns)
models2 <- list(df_highdils_fit, df_highdils_fitni, df_highdils_fitns )
model.names2 <- c( 'dilution and sex interaction', 'dilution and sex no interaction', 'just dilution')
aictab(cand.set = models2, modnames = model.names2)
# best model is df_highdils_fitni no interaction
summary(df_highdils_fitni)
# remove 1, 3, 6, 0.1 dose treatment
df_lowdils <- df.convert_full[which(df.convert_full$numeric.dilution != 0.1),]
# remove 0.01 FFU dose treatment
df_lowdils <- df_lowdils[which(df_lowdils$numeric.dilution != 1),]
df_lowdils <- df_lowdils[which(df_lowdils$numeric.dilution != 3),]
df_lowdils <- df_lowdils[which(df_lowdils$numeric.dilution != 6),]
# dilution and sex interaction
df_lowdils_fit<- coxph(Surv(dead, status) ~ numeric.dilution*sex + Block, data=df_lowdils)
summary(df_lowdils_fit)
# dilution and sex no interaction
df_lowdils_fitni <- coxph(Surv(dead, status) ~ numeric.dilution + sex + Block, data=df_lowdils)
summary(df_lowdils_fitni)
# dilution no sex
df_lowdils_fitns <- coxph(Surv(dead, status) ~ numeric.dilution + Block, data=df_lowdils)
summary(df_lowdils_fitns)
models3 <- list(df_lowdils_fit, df_lowdils_fitni, df_lowdils_fitns )
model.names3 <- c( 'dilution and sex interaction', 'dilution and sex no interaction', 'just dilution')
aictab(cand.set = models3, modnames = model.names3)
# best model does not have sex df_lowdils_fitns
summary(df_lowdils_fitns)
ggsurvplot(df_fit_fem, size = 5,
pval = FALSE, conf.int = FALSE,
legend = "bottom",
font.tickslab = c(14),
font.x = c(16),
font.y = c(16),
font.t = c(16),
ggtheme = theme_light(),
title = expression(paste("Female",italic(" D. innubila "), "Injected with Dilutions of Passage 4 DiNV")),
legend.title="Treatment",
legend.labs=c("CCM", "0.01 FFU", "0.1 FFU", "1 FFU", "3 FFU", "6 FFU"),
font.legend = c(14),
palette = c("#E7E1EF", "#C994C7","#DF65B0","#E7298A" ,"#980043", "#67001F")) + ylab("Survival Proporation") + xlab("Days post injection")
df.convert_m <- df.convert_full[which(df.convert_full$sex != "female"),]
# order treatments
df.convert_m <- df.convert_m %>%
mutate(dilution = factor(dilution, levels = c("CCM", "0.01", "0.1", "1", "3", "6")))
# change to not have confidence intervals in this one so you can see them
df_fit_m<- survfit(Surv(dead, status) ~ dilution, data=df.convert_m)
ggsurvplot(df_fit_m, size = 5,
pval = FALSE, conf.int = FALSE,
legend = "bottom",
font.tickslab = c(14),
font.x = c(16),
font.y = c(16),
font.t = c(16),
ggtheme = theme_light(),
title = expression(paste("Male",italic(" D. innubila "), "Injected with Dilutions of Passage 4 DiNV")),
legend.title="Treatment",
legend.labs=c("CCM", "0.01 FFU", "0.1 FFU", "1 FFU", "3 FFU", "6 FFU"),
font.legend = c(14),
palette = c("#E7E1EF", "#C994C7","#DF65B0","#E7298A" ,"#980043", "#67001F")) + ylab("Survival Proporation") + xlab("Days post injection")
